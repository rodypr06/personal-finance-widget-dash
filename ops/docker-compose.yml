version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: finance-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../seed:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - finance-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: finance-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - finance-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  api:
    build:
      context: ../api
      dockerfile: ../ops/Dockerfile
    container_name: finance-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      JWT_SECRET: ${JWT_SECRET}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL:-}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host:ro
    networks:
      - finance-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: n8n service (uncomment if running n8n in same compose)
  # n8n:
  #   image: n8nio/n8n:latest
  #   container_name: finance-n8n
  #   restart: unless-stopped
  #   environment:
  #     N8N_BASIC_AUTH_ACTIVE: 'true'
  #     N8N_BASIC_AUTH_USER: ${N8N_USER}
  #     N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
  #     WEBHOOK_URL: http://api:8080
  #   ports:
  #     - "5678:5678"
  #   volumes:
  #     - n8n_data:/home/node/.n8n
  #     - ../n8n/workflows:/home/node/.n8n/workflows:ro
  #   networks:
  #     - finance-net
  #   depends_on:
  #     - api

networks:
  finance-net:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  # n8n_data:
  #   driver: local
